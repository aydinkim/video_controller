//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/video.hpp"
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
//Mat frame; //current frame
//Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
//Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
//int keyboard; //input from keyboard
void help();
//void processVideo(char* videoFilename);
//void processImages(char* firstFrameFilename);

void help()
{
	cout
		<< "--------------------------------------------------------------------------" << endl
		<< "This program shows how to use background subtraction methods provided by "  << endl
		<< " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
		<< endl
		<< "Usage:"                                                                     << endl
		<< "./bs {-vid <video filename>|-img <image filename>}"                         << endl
		<< "for example: ./bs -vid video.avi"                                           << endl
		<< "or: ./bs -img /data/images/1.png"                                           << endl
		<< "--------------------------------------------------------------------------" << endl
		<< endl;
}
int main(int argc, char* argv[])
{
	//print help information
	help();
	//check for the input parameter correctness
	if(argc != 3) {
		cerr <<"Incorret input list" << endl;
		cerr <<"exiting..." << endl;
		return EXIT_FAILURE;
	}
	//create GUI windows
	namedWindow("Frame");

	//create Background Subtractor objects
	if(strcmp(argv[1], "-vid") == 0) {
		//input data coming from a video
		//processVideo(argv[2]);
	}
	else if(strcmp(argv[1], "-img") == 0) {
		//input data coming from a sequence of images
		//processImages(argv[2]);
	}
	else {
		//error in reading input parameters
		cerr <<"Please, check the input parameters." << endl;
		cerr <<"Exiting..." << endl;
		return EXIT_FAILURE;
	}
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}
